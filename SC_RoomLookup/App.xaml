<Application x:Class="SC_RoomLookup.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:local="clr-namespace:SC_RoomLookup"
             xmlns:sys="clr-namespace:System;assembly=mscorlib"
             StartupUri="MainWindow.xaml">
    <Application.Resources>
        <SolidColorBrush x:Key="SeaBlue" Color="#FF165A89"/>
        <SolidColorBrush x:Key="BackColor" Color="White"/>
        <SolidColorBrush x:Key="DeepSeaBlue" Color="#FF114466"/>
        <SolidColorBrush x:Key="RoyalSeaBlue" Color="#FF0E3651"/>
        <SolidColorBrush x:Key="BrightBlue" Color="#FF0070D9"/>
        <SolidColorBrush x:Key="Orange" Color="#FFF0DEB4"/>
        <SolidColorBrush x:Key="RoyalRed" Color="#FF4C2523"/>
        <SolidColorBrush x:Key="DarkSteelBlue" Color="#FF005397"/>
        <SolidColorBrush x:Key="Aqua" Color="#FF1ABC9C"/>

        <SolidColorBrush x:Key="Tan" Color="#FFF0DEB4"/>
        <SolidColorBrush x:Key="TestIconColor" Color="#FF0072CF"/>
        <SolidColorBrush x:Key="MediumBlue" Color="#FF004381"/>

        <!-- Hall Colors -->
        <SolidColorBrush x:Key="AHall" Color="#e74c3c"/>
        <SolidColorBrush x:Key="KCHall" Color="#9b59b6"/>
        <SolidColorBrush x:Key="LibscombHall" Color="#3498db"/>
        <SolidColorBrush x:Key="Vandergriff" Color="#e67e22"/>

        <!--FLAT COLORS-->
        <SolidColorBrush x:Key="FlatGreen" Color="#FF18A8A1"/>
        <SolidColorBrush x:Key="FlatBlue" Color="#FF3C79C2"/>
        <SolidColorBrush x:Key="FlatLightBlue" Color="#FF75B4FF"/>
        <SolidColorBrush x:Key="FlatDarkBlue" Color="#FF384C81"/>
        <SolidColorBrush x:Key="FlatYellow" Color="#FFFFE46D"/>
        <SolidColorBrush x:Key="FlatRed" Color="#FFC24E3C"/>
        <SolidColorBrush x:Key="FlatOrange" Color="#FFAE42"/>
        <SolidColorBrush x:Key="FlatPurple" Color="#9365B8"/>


        <!--FLAT COLOR SCHEMES-->
        <!--Green-->
        <SolidColorBrush x:Key="LightGreen" Color="#FF3EC59D"/>
        <SolidColorBrush x:Key="Green" Color="#FF339E7E"/>
        <SolidColorBrush x:Key="DarkGreen" Color="#FF277A61"/>
        <!--Blue-->
        <SolidColorBrush x:Key="LightBlue" Color="#FF3C79C2"/>
        <SolidColorBrush x:Key="Blue" Color="#FF3668A4"/>
        <SolidColorBrush x:Key="DarkBlue" Color="#FF264B78"/>
        <!--Red-->
        <SolidColorBrush x:Key="LightRed" Color="#FFE2747D"/>
        <SolidColorBrush x:Key="Red" Color="#FFBB636A"/>
        <SolidColorBrush x:Key="DarkRed" Color="#FF934D53"/>
        <!--Grays-->
        <!--<SolidColorBrush x:Key="LightGray" Color="#FFDADADA"/>
        <SolidColorBrush x:Key="LightGray2" Color="#FFCDCDCD"/>
        <SolidColorBrush x:Key="LightGray3" Color="#FFECECEC"/>
        <SolidColorBrush x:Key="Gray" Color="#FFC3C3C3"/>
        <SolidColorBrush x:Key="DarkGray" Color="#FF575757"/>-->
        <!--<SolidColorBrush x:Key="MediumGray" Color="#FFAAAAAA"/>
            -->
        <!--New Grays-->

        <SolidColorBrush x:Key="LightGray1" Color="#FFFDFDFD"/>
        <SolidColorBrush x:Key="LightGray2" Color="#FFF2F2F1"/>
        <SolidColorBrush x:Key="LightGray3" Color="#FFE8E8E8"/>
        <SolidColorBrush x:Key="Gray1"      Color="#FFCFCFCF"/>
        <SolidColorBrush x:Key="Gray2"      Color="#FFC3C3C3"/>
        <SolidColorBrush x:Key="Gray3"      Color="#FFBBBBBB"/>
        <SolidColorBrush x:Key="DarkGray1"  Color="#FF747474"/>
        <SolidColorBrush x:Key="DarkGray2"  Color="#FF686868"/>
        <SolidColorBrush x:Key="DarkGray3"  Color="#FF5D5D5D"/>

        <!--Control Color Gray-->
        <SolidColorBrush x:Key="ControlGray"      Color="Gainsboro"/>
        <SolidColorBrush x:Key="ControlGray2"      Color="#FFD6D6D6"/>

        <!--Fonts-->
        <FontFamily x:Key="Font">HP Simplified</FontFamily>

        <!--Font Sizes-->
        <sys:Double x:Key="SmallFontSize">30</sys:Double>
        <sys:Double x:Key="MediumFontSize">50</sys:Double>
        <sys:Double x:Key="LargeFontSize">70</sys:Double>

        <GridLength x:Key="ExtraLargeSquareDim">120</GridLength>
        <GridLength x:Key="LargeSquareDim">90</GridLength>
        <GridLength x:Key="SquareDim">60</GridLength>
        <GridLength x:Key="SmallGridDim">30</GridLength>
        <GridLength x:Key="RectDim">300</GridLength>
        <sys:Double x:Key="SquareDimDouble">60</sys:Double>

        <sys:Double x:Key="FontSize">15</sys:Double>
        <sys:Double x:Key="SmallProfilePic">39</sys:Double>
        <sys:Double x:Key="SmallQuareDim">40</sys:Double>
        <sys:Double x:Key="MediumProfilePic">60</sys:Double>
        <sys:Double x:Key="LargeProfilePic">110</sys:Double>
        <sys:Double x:Key="RectDimDouble">300</sys:Double>
        <sys:Double x:Key="DesignHeight">900</sys:Double>

        <Thickness x:Key="SmallIndent">41,5,0,0</Thickness>
        <Thickness x:Key="SmallLineIndent">41,2,2,2</Thickness>

        <local:BooleanToVisibilityConverter x:Key="BoolToVis"/>
        <local:EmptyTextToVisConverter x:Key="EmptyTextVisConverter"/>
        <local:BooleanToCollapseConverter x:Key="BoolToCollapse"/>
        <local:InverseBooleanToVisibilityConverter x:Key="InverseBoolToCollapse"/>
        <local:InverseBooleanToVisibilityConverter x:Key="InverseBoolToVis"/>


        <!--<local:EnumToBooleanConverter x:Key="EnumConverter"/>
        <local:InverseBoolean x:Key="InverseBool"/>
        -->

        <!--Flat Design-->
        <sys:Double x:Key="BtnWidth">175</sys:Double>
        <sys:Double x:Key="BtnHeight">30</sys:Double>
        <sys:Double x:Key="BtnFontSize">17</sys:Double>

        <!--Tab Style-->
        <Style x:Key="TabButton" TargetType="{x:Type ToggleButton}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border x:Name="main_Grid" CornerRadius="5,5,0,0" BorderThickness="1.5,1.5,1.5,0" BorderBrush="{TemplateBinding Background}" Width="150">
                            <Grid>
                                <TextBlock x:Name="Header_Txtblk" Text="{TemplateBinding ContentStringFormat}" VerticalAlignment="Center" TextAlignment="Center"/>
                                <ContentPresenter/>
                            </Grid>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsChecked" Value="True">
                                <Setter TargetName="main_Grid" Property="Background" Value="{Binding ElementName=main_Grid, Path=BorderBrush}"/>
                                <Setter TargetName="Header_Txtblk" Property="Foreground" Value="Black"/>
                            </Trigger>
                            <Trigger Property="IsChecked" Value="False">
                                <Setter TargetName="main_Grid" Property="Background" Value="{Binding ElementName=main_Grid, Path=BorderBrush}"/>
                                <Setter TargetName="Header_Txtblk" Property="Foreground" Value="White"/>
                            </Trigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsMouseOver" Value="True"/>
                                    <Condition Property="IsChecked" Value="False"/>
                                </MultiTrigger.Conditions>
                                <Setter TargetName="main_Grid" Property="Background" Value="{Binding ElementName=main_Grid, Path=BorderBrush}"/>
                                <Setter TargetName="Header_Txtblk" Property="Foreground" Value="White"/>
                            </MultiTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        
        <!--Solid Fill Flat Design Buttons-->
        <Style x:Key="FlatBlueBtn" TargetType="Button">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border CornerRadius="3" Background="{TemplateBinding Background}" Height="{StaticResource BtnHeight}" Width="{StaticResource BtnWidth}">
                            <TextBlock Foreground="White" TextAlignment="Center" FontSize="{StaticResource BtnFontSize}" VerticalAlignment="Center">
                                        <ContentPresenter/>
                            </TextBlock>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="{StaticResource Blue}"/>
                </Trigger>
                <Trigger Property="IsMouseOver" Value="False">
                    <Setter Property="Background" Value="{StaticResource LightBlue}"/>
                </Trigger>
                <Trigger Property="IsPressed" Value="True">
                    <Setter Property="Background" Value="{StaticResource DarkBlue}"/>
                </Trigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="FlatRedBtn" TargetType="Button">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border CornerRadius="3" Background="{TemplateBinding Background}" Height="{StaticResource BtnHeight}" Width="{StaticResource BtnWidth}">
                            <TextBlock Foreground="White" TextAlignment="Center" FontSize="{StaticResource BtnFontSize}" VerticalAlignment="Center">
                                        <ContentPresenter/>
                            </TextBlock>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="{DynamicResource Red}"/>
                </Trigger>
                <Trigger Property="IsMouseOver" Value="False">
                    <Setter Property="Background" Value="{DynamicResource LightRed}"/>
                </Trigger>
                <Trigger Property="IsPressed" Value="True">
                    <Setter Property="Background" Value="{DynamicResource DarkRed}"/>
                </Trigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="{x:Type CheckBox}" TargetType="CheckBox">
            <Setter Property="SnapsToDevicePixels" Value="true"/>
            <Setter Property="OverridesDefaultStyle" Value="true"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="CheckBox">
                        <BulletDecorator Background="Transparent">
                            <BulletDecorator.Bullet>
                                <Border x:Name="Border"  
                                        Width="{TemplateBinding Width}" 
                                        Height="{TemplateBinding Height}" 
                                        CornerRadius="4" 
                                        Background="{StaticResource ControlGray}"
                                        BorderBrush="Transparent">
                                </Border>
                            </BulletDecorator.Bullet>
                            <ContentPresenter Margin="4,0,0,0"
                                              VerticalAlignment="Center"
                                              HorizontalAlignment="Left"
                                              RecognizesAccessKey="True"/>
                        </BulletDecorator>
                        <ControlTemplate.Triggers>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsChecked" Value="False"/>
                                    <Condition Property="IsMouseOver" Value="False"/>
                                </MultiTrigger.Conditions>
                                <Setter TargetName="Border" Property="Background" Value="{StaticResource FlatBlue}" />
                            </MultiTrigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsChecked" Value="False"/>
                                    <Condition Property="IsMouseOver" Value="True"/>
                                </MultiTrigger.Conditions>
                                <Setter TargetName="Border" Property="Background" Value="{StaticResource DarkBlue}" />
                            </MultiTrigger>
                            <Trigger Property="IsChecked" Value="True">
                                <Setter TargetName="Border" Property="Background" Value="{StaticResource DarkBlue}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>


        <Style x:Key="FlatGreenBtn" TargetType="Button">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border CornerRadius="3" Background="{TemplateBinding Background}" Height="{StaticResource BtnHeight}" Width="{StaticResource BtnWidth}">
                            <TextBlock Foreground="White" TextAlignment="Center" FontSize="{StaticResource BtnFontSize}" VerticalAlignment="Center">
                                        <ContentPresenter/>
                            </TextBlock>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="{DynamicResource Green}"/>
                </Trigger>
                <Trigger Property="IsMouseOver" Value="False">
                    <Setter Property="Background" Value="{DynamicResource LightGreen}"/>
                </Trigger>
                <Trigger Property="IsPressed" Value="True">
                    <Setter Property="Background" Value="{DynamicResource DarkGreen}"/>
                </Trigger>
            </Style.Triggers>
        </Style>

        <!--Outline Flat Design Buttons-->
        <Style x:Key="FlatBlueOutlineBtn" TargetType="Button">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border CornerRadius="3" BorderBrush="{TemplateBinding BorderBrush}" Height="{StaticResource BtnHeight}" Width="{StaticResource BtnWidth}" BorderThickness="3">
                            <TextBlock Foreground="{TemplateBinding BorderBrush}" TextAlignment="Center" FontSize="{StaticResource BtnFontSize}" VerticalAlignment="Center">
                                        <ContentPresenter/>
                            </TextBlock>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="BorderBrush" Value="{StaticResource Blue}"/>
                </Trigger>
                <Trigger Property="IsMouseOver" Value="False">
                    <Setter Property="BorderBrush" Value="{StaticResource LightBlue}"/>
                </Trigger>
                <Trigger Property="IsPressed" Value="True">
                    <Setter Property="BorderBrush" Value="{StaticResource DarkBlue}"/>
                </Trigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="FlatRedOutlineBtn" TargetType="Button">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border CornerRadius="3" BorderBrush="{TemplateBinding BorderBrush}" Height="{StaticResource BtnHeight}" Width="{StaticResource BtnWidth}" BorderThickness="3">
                            <TextBlock Foreground="{TemplateBinding BorderBrush}" TextAlignment="Center" FontSize="{StaticResource BtnFontSize}" VerticalAlignment="Center">
                                        <ContentPresenter/>
                            </TextBlock>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="BorderBrush" Value="{DynamicResource DarkRed}"/>
                </Trigger>
                <Trigger Property="IsMouseOver" Value="False">
                    <Setter Property="BorderBrush" Value="{DynamicResource Red}"/>
                </Trigger>
                <Trigger Property="IsPressed" Value="True">
                    <Setter Property="BorderBrush" Value="{DynamicResource RoyalRed}"/>
                </Trigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="FlatGreenOutlineBtn" TargetType="Button">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border CornerRadius="3" BorderBrush="{TemplateBinding BorderBrush}" Height="{StaticResource BtnHeight}" Width="{StaticResource BtnWidth}" BorderThickness="3">
                            <TextBlock Foreground="{TemplateBinding BorderBrush}" TextAlignment="Center" FontSize="{StaticResource BtnFontSize}" VerticalAlignment="Center">
                                        <ContentPresenter/>
                            </TextBlock>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="BorderBrush" Value="{DynamicResource Green}"/>
                </Trigger>
                <Trigger Property="IsMouseOver" Value="False">
                    <Setter Property="BorderBrush" Value="{DynamicResource LightGreen}"/>
                </Trigger>
                <Trigger Property="IsPressed" Value="True">
                    <Setter Property="BorderBrush" Value="{DynamicResource DarkGreen}"/>
                </Trigger>
            </Style.Triggers>
        </Style>

        <!--Red Delete Button-->
        <Style x:Key="RedDeleteBtn" TargetType="Button">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border CornerRadius="20" Background="{TemplateBinding Background}" Height="{TemplateBinding Width}" Width="{TemplateBinding Width}">
                            <TextBlock Foreground="White" TextAlignment="Center" FontSize="14" VerticalAlignment="Center">
                                        <ContentPresenter/>
                            </TextBlock>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="{DynamicResource Red}"/>
                </Trigger>
                <Trigger Property="IsMouseOver" Value="False">
                    <Setter Property="Background" Value="{DynamicResource LightRed}"/>
                </Trigger>
                <Trigger Property="IsPressed" Value="True">
                    <Setter Property="Background" Value="{DynamicResource DarkRed}"/>
                </Trigger>
            </Style.Triggers>
        </Style>

        <!--Text Buttons-->
        <Style TargetType="Button" x:Key="BlueTextBtn">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Grid MaxHeight="30">
                            <TextBlock Foreground="{TemplateBinding Foreground}" TextAlignment="Center" VerticalAlignment="Center">
                                <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                            </TextBlock>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Foreground" Value="{StaticResource DarkBlue}"/>
                </Trigger>
                <Trigger Property="IsMouseOver" Value="False">
                    <Setter Property="Foreground" Value="{DynamicResource FlatBlue}"/>
                </Trigger>
            </Style.Triggers>
        </Style>

        <Style TargetType="Button" x:Key="WhiteTextBtn">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Grid MaxHeight="30">
                            <TextBlock Foreground="{TemplateBinding Foreground}" TextAlignment="Center" VerticalAlignment="Center">
                                <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                            </TextBlock>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Foreground" Value="{StaticResource LightGray3}"/>
                </Trigger>
                <Trigger Property="IsMouseOver" Value="False">
                    <Setter Property="Foreground" Value="White"/>
                </Trigger>
            </Style.Triggers>
        </Style>

        <Style TargetType="Button" x:Key="ImageBtn">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border Background="{TemplateBinding Background}"
                                CornerRadius="5"
                                Padding="2">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="{StaticResource Gray1}"/>
                </Trigger>
                <Trigger Property="IsMouseOver" Value="False">
                    <Setter Property="Background" Value="Transparent"/>
                </Trigger>
            </Style.Triggers>
        </Style>

        <Style TargetType="ToggleButton" x:Key="ImageFlatBlueToggleBtn">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ToggleButton">
                        <Border Background="{TemplateBinding Background}" CornerRadius="5">
                            <ContentPresenter/>
                        </Border>

                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="{StaticResource DarkBlue}"/>
                </Trigger>
                <Trigger Property="IsMouseOver" Value="False">
                    <Setter Property="Background" Value="Transparent"/>
                </Trigger>
                <Trigger Property="IsChecked" Value="True">
                    <Setter Property="Background" Value="{StaticResource DarkBlue}"/>
                </Trigger>
            </Style.Triggers>
        </Style>

        <Style TargetType="ToggleButton" x:Key="ImageFlatGrayToggleBtn">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ToggleButton">
                        <Border Background="{TemplateBinding Background}" CornerRadius="5">
                            <ContentPresenter/>
                        </Border>

                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="{StaticResource Gray2}"/>
                </Trigger>
                <Trigger Property="IsMouseOver" Value="False">
                    <Setter Property="Background" Value="Transparent"/>
                </Trigger>
                <Trigger Property="IsChecked" Value="True">
                    <Setter Property="Background" Value="{StaticResource Gray3}"/>
                </Trigger>
            </Style.Triggers>
        </Style>

        <Style TargetType="RepeatButton" x:Key="GrayTextRepeatBtn">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="RepeatButton">
                        <Grid MaxHeight="30">
                            <TextBlock Foreground="{TemplateBinding Foreground}" TextAlignment="Center" VerticalAlignment="Center">
                                <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                            </TextBlock>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Foreground" Value="{StaticResource DarkGray1}"/>
                </Trigger>
                <Trigger Property="IsMouseOver" Value="False">
                    <Setter Property="Foreground" Value="{StaticResource Gray1}"/>
                </Trigger>
            </Style.Triggers>
        </Style>

        <Style TargetType="RepeatButton" x:Key="BlueTextRepeatBtn">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="RepeatButton">
                        <Grid MaxHeight="30">
                            <TextBlock Foreground="{TemplateBinding Foreground}" TextAlignment="Center" VerticalAlignment="Center">
                                <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                            </TextBlock>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Foreground" Value="{StaticResource DarkBlue}"/>
                </Trigger>
                <Trigger Property="IsMouseOver" Value="False">
                    <Setter Property="Foreground" Value="{StaticResource FlatBlue}"/>
                </Trigger>
            </Style.Triggers>
        </Style>

        <Style TargetType="Button" x:Key="RedTextBtn">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Grid MaxHeight="30">
                            <TextBlock Foreground="{TemplateBinding Foreground}" TextAlignment="Center" VerticalAlignment="Center" HorizontalAlignment="Center">
                                <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                            </TextBlock>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>

            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Foreground" Value="{StaticResource DarkRed}"/>
                </Trigger>
                <Trigger Property="IsMouseOver" Value="False">
                    <Setter Property="Foreground" Value="{StaticResource FlatRed}"/>
                </Trigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="TabToggleBtn" TargetType="{x:Type ToggleButton}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Grid x:Name="main_Grid">
                            <TextBlock x:Name="Header_Txtblk" Text="{TemplateBinding ContentStringFormat}" Margin="60,0,0,0" VerticalAlignment="Center"/>
                            <ContentPresenter/>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsChecked" Value="True">
                                <Setter TargetName="main_Grid" Property="Background" Value="{StaticResource LightGray1}"/>
                                <Setter TargetName="Header_Txtblk" Property="Foreground" Value="Black"/>
                            </Trigger>
                            <Trigger Property="IsChecked" Value="False">
                                <Setter TargetName="main_Grid" Property="Background" Value="{StaticResource FlatBlue}"/>
                                <Setter TargetName="Header_Txtblk" Property="Foreground" Value="White"/>
                            </Trigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsMouseOver" Value="True"/>
                                    <Condition Property="IsChecked" Value="False"/>
                                </MultiTrigger.Conditions>
                                <Setter TargetName="main_Grid" Property="Background" Value="{StaticResource DarkBlue}"/>
                                <Setter TargetName="Header_Txtblk" Property="Foreground" Value="White"/>
                            </MultiTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="RectangleButton" TargetType="{x:Type Button}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border CornerRadius="5" Background="{TemplateBinding Background}" Padding="4">
                            <TextBlock Foreground="White" HorizontalAlignment="Center" VerticalAlignment="Center">
                                <ContentPresenter/>
                            </TextBlock>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="LightSteelBlue"/>
                </Trigger>
                <Trigger Property="IsMouseOver" Value="False">
                    <Setter Property="Background" Value="SteelBlue"/>
                </Trigger>
            </Style.Triggers>
        </Style>



        <ControlTemplate x:Key="TextBoxBaseControlTemplate" TargetType="{x:Type TextBoxBase}">
            <Border Background="{StaticResource LightGray3}" 
                x:Name="Bd" BorderBrush="Black"
                BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="5">
                <ScrollViewer x:Name="PART_ContentHost"  Margin="7"/>
            </Border>
            <ControlTemplate.Triggers>
                <Trigger Property="IsEnabled" Value="False">
                    <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" TargetName="Bd"/>
                    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                </Trigger>
                <Trigger Property="Width" Value="Auto">
                    <Setter Property="MinWidth" Value="100"/>
                </Trigger>
                <Trigger Property="Height" Value="Auto">
                    <Setter Property="MinHeight" Value="20"/>
                </Trigger>
                <Trigger Property="IsFocused" Value="True">
                    <Setter Property="Foreground" Value="Black" />
                    <Setter Property="BorderThickness" Value="0"/>
                    <Setter Property="Background" Value="Transparent"/>
                </Trigger>
                <Trigger Property="IsFocused" Value="False">
                    <Setter Property="Foreground" Value="{DynamicResource DarkGray2}"/>
                    <Setter Property="BorderThickness" Value="0"/>
                    <Setter Property="Background" Value="Transparent"/>
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>

        <Style TargetType="ListBoxItem">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ListBoxItem">
                        <Border BorderThickness="{TemplateBinding Border.BorderThickness}"
                            Padding="{TemplateBinding Control.Padding}"
                            BorderBrush="{TemplateBinding Border.BorderBrush}"
                            Background="{TemplateBinding Panel.Background}"
                            Name="Bd"
                            CornerRadius="20"
                            SnapsToDevicePixels="True">
                            <ContentPresenter Content="{TemplateBinding ContentControl.Content}"
                               ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}"
                               ContentStringFormat="{TemplateBinding ContentControl.ContentStringFormat}"
                               HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                               VerticalAlignment="Top"
                               SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" />
                        </Border>
                        <ControlTemplate.Triggers>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="Selector.IsSelectionActive" Value="False"/>
                                    <Condition Property="Selector.IsSelected" Value="True"/>
                                </MultiTrigger.Conditions>
                                <Setter Property="Panel.Background" TargetName="Bd" Value="Transparent"/>
                                <Setter Property="Border.BorderBrush" TargetName="Bd" Value="{StaticResource LightGray3}"/>
                            </MultiTrigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="Selector.IsSelectionActive" Value="True"/>
                                    <Condition Property="Selector.IsSelected" Value="True"/>
                                </MultiTrigger.Conditions>
                                <Setter Property="Panel.Background" TargetName="Bd" Value="{StaticResource LightGray3}"/>
                                <Setter Property="Border.BorderBrush" TargetName="Bd" Value="Transparent"/>
                            </MultiTrigger>
                            <Trigger Property="UIElement.IsMouseOver" Value="True">
                                <Setter Property="Panel.Background" TargetName="Bd" Value="{StaticResource LightGray2}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style TargetType="ListViewItem">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ListViewItem">
                        <Border BorderThickness="{TemplateBinding Border.BorderThickness}"
                            Padding="{TemplateBinding Control.Padding}"
                            BorderBrush="{TemplateBinding Border.BorderBrush}"
                            Background="{TemplateBinding Background}"
                            Name="Bd"
                            CornerRadius="10"
                            SnapsToDevicePixels="True">
                            <ContentPresenter Content="{TemplateBinding ContentControl.Content}"
                               ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}"
                               ContentStringFormat="{TemplateBinding ContentControl.ContentStringFormat}"
                               HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                               VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                               SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" />
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Setter Property="IsTabStop" Value="False"/>
        </Style>

        <Style x:Key="BlueTextToggleBtn" TargetType="ToggleButton">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ToggleButton">
                        <Grid MaxHeight="30">
                            <TextBlock Foreground="{TemplateBinding Foreground}" TextAlignment="Center" VerticalAlignment="Center">
                                <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                            </TextBlock>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsMouseOver" Value="True"/>
                        <Condition Property="IsChecked" Value="True"/>
                    </MultiTrigger.Conditions>
                    <Setter Property="Foreground" Value="{StaticResource DarkBlue}"/>
                </MultiTrigger>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsMouseOver" Value="False"/>
                        <Condition Property="IsChecked" Value="True"/>
                    </MultiTrigger.Conditions>
                    <Setter Property="Foreground" Value="{StaticResource FlatBlue}"/>
                </MultiTrigger>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsMouseOver" Value="True"/>
                        <Condition Property="IsChecked" Value="False"/>
                    </MultiTrigger.Conditions>
                    <Setter Property="Foreground" Value="{StaticResource FlatBlue}"/>
                </MultiTrigger>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsMouseOver" Value="False"/>
                        <Condition Property="IsChecked" Value="False"/>
                    </MultiTrigger.Conditions>
                    <Setter Property="Foreground" Value="{StaticResource DarkGray2}"/>
                </MultiTrigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="GreenTextToggleBtn" TargetType="ToggleButton">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ToggleButton">
                        <Grid MaxHeight="30">
                            <TextBlock Foreground="{TemplateBinding Foreground}" TextAlignment="Center" VerticalAlignment="Center">
                                <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                            </TextBlock>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsMouseOver" Value="True"/>
                        <Condition Property="IsChecked" Value="True"/>
                    </MultiTrigger.Conditions>
                    <Setter Property="Foreground" Value="{StaticResource DarkGreen}"/>
                </MultiTrigger>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsMouseOver" Value="False"/>
                        <Condition Property="IsChecked" Value="True"/>
                    </MultiTrigger.Conditions>
                    <Setter Property="Foreground" Value="{StaticResource FlatGreen}"/>
                </MultiTrigger>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsMouseOver" Value="True"/>
                        <Condition Property="IsChecked" Value="False"/>
                    </MultiTrigger.Conditions>
                    <Setter Property="Foreground" Value="{StaticResource FlatGreen}"/>
                </MultiTrigger>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsMouseOver" Value="False"/>
                        <Condition Property="IsChecked" Value="False"/>
                    </MultiTrigger.Conditions>
                    <Setter Property="Foreground" Value="{StaticResource DarkGray2}"/>
                </MultiTrigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="RoundedAnswerToggleBtn" TargetType="{x:Type ToggleButton}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ToggleButton">
                        <Border CornerRadius="5" Background="{TemplateBinding Background}">
                            <TextBlock Foreground="White" HorizontalAlignment="Center" VerticalAlignment="Center">
                                <ContentPresenter/>
                            </TextBlock>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsMouseOver" Value="True"/>
                        <Condition Property="IsChecked" Value="True"/>
                    </MultiTrigger.Conditions>
                    <Setter Property="Background" Value="{StaticResource DarkGreen}"/>
                </MultiTrigger>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsMouseOver" Value="False"/>
                        <Condition Property="IsChecked" Value="True"/>
                    </MultiTrigger.Conditions>
                    <Setter Property="Background" Value="{StaticResource FlatGreen}"/>
                </MultiTrigger>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsMouseOver" Value="True"/>
                        <Condition Property="IsChecked" Value="False"/>
                    </MultiTrigger.Conditions>
                    <Setter Property="Background" Value="{StaticResource FlatBlue}"/>
                </MultiTrigger>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsMouseOver" Value="False"/>
                        <Condition Property="IsChecked" Value="False"/>
                    </MultiTrigger.Conditions>
                    <Setter Property="Background" Value="{StaticResource DarkBlue}"/>
                </MultiTrigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="AnswerToggleBtn" TargetType="{x:Type ToggleButton}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ToggleButton">
                        <Border CornerRadius="20" Background="{TemplateBinding Background}" Width="40" Height="40" Margin="2">
                            <TextBlock Foreground="White" HorizontalAlignment="Center" VerticalAlignment="Center">
                                <ContentPresenter/>
                            </TextBlock>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsMouseOver" Value="True"/>
                        <Condition Property="IsChecked" Value="True"/>
                    </MultiTrigger.Conditions>
                    <Setter Property="Background" Value="{StaticResource DarkGreen}"/>
                </MultiTrigger>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsMouseOver" Value="False"/>
                        <Condition Property="IsChecked" Value="True"/>
                    </MultiTrigger.Conditions>
                    <Setter Property="Background" Value="{StaticResource FlatGreen}"/>
                </MultiTrigger>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsMouseOver" Value="True"/>
                        <Condition Property="IsChecked" Value="False"/>
                    </MultiTrigger.Conditions>
                    <Setter Property="Background" Value="{StaticResource FlatBlue}"/>
                </MultiTrigger>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsMouseOver" Value="False"/>
                        <Condition Property="IsChecked" Value="False"/>
                    </MultiTrigger.Conditions>
                    <Setter Property="Background" Value="{StaticResource DarkBlue}"/>
                </MultiTrigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="LetterToggleBtn" TargetType="{x:Type ToggleButton}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ToggleButton">
                        <Border CornerRadius="20" Background="{TemplateBinding Background}" Width="40" Height="40" Margin="2">
                            <TextBlock Foreground="White" HorizontalAlignment="Center" VerticalAlignment="Center">
                                <ContentPresenter/>
                            </TextBlock>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="{StaticResource DarkBlue}"/>
                </Trigger>
                <Trigger Property="IsMouseOver" Value="False">
                    <Setter Property="Background" Value="{StaticResource FlatBlue}"/>
                </Trigger>
                <Trigger Property="IsChecked" Value="True">
                    <Setter Property="Background" Value="{StaticResource DarkBlue}"/>
                </Trigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="YesNoToggleBtn" TargetType="{x:Type ToggleButton}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ToggleButton">
                        <Border CornerRadius="20" Background="{TemplateBinding Background}">
                            <TextBlock Foreground="White" HorizontalAlignment="Center" VerticalAlignment="Center">
                                <ContentPresenter/>
                            </TextBlock>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsMouseOver" Value="True"/>
                        <Condition Property="IsChecked" Value="True"/>
                    </MultiTrigger.Conditions>
                    <Setter Property="Background" Value="{StaticResource DarkGreen}"/>
                    <Setter Property="Content" Value="Yes"/>
                </MultiTrigger>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsMouseOver" Value="False"/>
                        <Condition Property="IsChecked" Value="True"/>
                    </MultiTrigger.Conditions>
                    <Setter Property="Background" Value="{StaticResource Green}"/>
                    <Setter Property="Content" Value="Yes"/>
                </MultiTrigger>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsMouseOver" Value="True"/>
                        <Condition Property="IsChecked" Value="False"/>
                    </MultiTrigger.Conditions>
                    <Setter Property="Background" Value="{StaticResource FlatBlue}"/>
                    <Setter Property="Content" Value="No"/>
                </MultiTrigger>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsMouseOver" Value="False"/>
                        <Condition Property="IsChecked" Value="False"/>
                    </MultiTrigger.Conditions>
                    <Setter Property="Background" Value="{StaticResource DarkBlue}"/>
                    <Setter Property="Content" Value="No"/>
                </MultiTrigger>
            </Style.Triggers>
        </Style>

        <ControlTemplate x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition />
                    <ColumnDefinition Width="20" />
                </Grid.ColumnDefinitions>
                <Border x:Name="Border"  Grid.ColumnSpan="2" CornerRadius="5" Background="{StaticResource ControlGray}"/>
                <Path x:Name="Arrow" Grid.Column="1" Fill="{StaticResource DarkGray3}" HorizontalAlignment="Center" VerticalAlignment="Center" Data="M0,0 L0,2 L4,6 L8,2 L8,0 L4,4 z"/>
            </Grid>
        </ControlTemplate>
        <ControlTemplate x:Key="ComboBoxTextBox" TargetType="{x:Type TextBox}">
            <Border x:Name="PART_ContentHost" Focusable="False" Background="{TemplateBinding Background}" />
        </ControlTemplate>
        <Style x:Key="{x:Type ComboBox}" TargetType="{x:Type ComboBox}">
            <Setter Property="SnapsToDevicePixels" Value="true"/>
            <Setter Property="OverridesDefaultStyle" Value="true"/>
            <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
            <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
            <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
            <Setter Property="MinWidth" Value="120"/>
            <Setter Property="MinHeight" Value="30"/>
            <Setter Property="Foreground" Value="{StaticResource DarkGray3}"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ComboBox}">
                        <Grid>
                            <ToggleButton Name="ToggleButton" Template="{StaticResource ComboBoxToggleButton}" Grid.Column="2" Focusable="False"
                            IsChecked="{Binding Path=IsDropDownOpen,Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}" ClickMode="Press"/>

                            <ContentPresenter Name="ContentSite" IsHitTestVisible="False"  Content="{TemplateBinding SelectionBoxItem}"
                            ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" Margin="3,3,23,3"
                            VerticalAlignment="Center" HorizontalAlignment="Left" />

                            <TextBox x:Name="PART_EditableTextBox" Style="{x:Null}"  Template="{StaticResource ComboBoxTextBox}" HorizontalAlignment="Left" VerticalAlignment="Center" TextAlignment="Center"
                                     Margin="3,3,23,3" Focusable="True" Visibility="Hidden" IsReadOnly="{TemplateBinding IsReadOnly}"/>

                            <Popup Name="Popup" Placement="Bottom" IsOpen="{TemplateBinding IsDropDownOpen}" AllowsTransparency="True" Focusable="False" PopupAnimation="Fade">
                                <Border x:Name="DropDownBorder" Background="{StaticResource ControlGray2}" CornerRadius="10" MinWidth="{TemplateBinding ActualWidth}" MaxHeight="{TemplateBinding MaxDropDownHeight}">
                                    <Grid Name="DropDown" SnapsToDevicePixels="True" >
                                        <ScrollViewer Margin="4,6,4,6" SnapsToDevicePixels="True">
                                            <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" />
                                        </ScrollViewer>
                                    </Grid>
                                </Border>

                            </Popup>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="HasItems" Value="false">
                                <Setter TargetName="DropDownBorder" Property="MinHeight" Value="95"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Foreground" Value="#888888"/>
                            </Trigger>
                            <Trigger Property="IsGrouping" Value="true">
                                <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                            </Trigger>
                            <Trigger SourceName="Popup" Property="Popup.AllowsTransparency" Value="true">
                                <Setter TargetName="DropDownBorder" Property="CornerRadius" Value="0"/>
                                <Setter TargetName="DropDownBorder" Property="Margin" Value="0,2,0,0"/>
                            </Trigger>
                            <Trigger Property="IsEditable"  Value="true">
                                <Setter Property="IsTabStop" Value="false"/>
                                <Setter TargetName="PART_EditableTextBox" Property="Visibility" Value="Visible"/>
                                <Setter TargetName="ContentSite" Property="Visibility" Value="Hidden"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="{x:Type ComboBoxItem}" TargetType="{x:Type ComboBoxItem}">
            <Setter Property="SnapsToDevicePixels" Value="true"/>
            <Setter Property="Foreground" Value="{StaticResource DarkGray3}"/>
            <Setter Property="OverridesDefaultStyle" Value="true"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                        <Border Name="Border" Padding="2" SnapsToDevicePixels="true" CornerRadius="3">
                            <ContentPresenter />
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsHighlighted" Value="true">
                                <Setter TargetName="Border" Property="Background" Value="LightSteelBlue"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Foreground" Value="#888888"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </Application.Resources>
</Application>
